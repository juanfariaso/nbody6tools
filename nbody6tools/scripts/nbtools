#!/usr/bin/python3
import sys
from optparse import OptionParser
from argparse import ArgumentParser
from inspect import getmembers, isfunction

from nbody6tools import Plots,Analyse

def executable_options():
    parser = ArgumentParser()
    subparsers = parser.add_subparsers(help='Available Commands')

    parser.add_argument("folder",metavar="FOLDER",help="simulation folder", default="./") 
    parser.add_argument("-o","--output",help="output file. Default shows without saving", default=None) 

    #animate
    parse_animate = subparsers.add_parser("animate",help="shows animation of simulation, may be slow in big clusters.")
    parse_animate.set_defaults(fun = Plots.make_animation )
    parse_animate.add_argument("--boxsize",default = None, type = float,
            help="Size of the box in parsecs. Default: 10 initial half mass radius")
    parse_animate.add_argument("--fps",help = "frames per second if an output file is given",default=10)
    parse_animate.add_argument("--xy",help="Projection of animation. Default 'xy'",default = "xy",
            choices=["xy","yx","xz","zx","yz","zy"])
    parse_animate.add_argument("--dpi",help="dpi for animated output. Default 'None'",default = None)

    #evol
    parse_evol = subparsers.add_parser("evol",help="shows the evolution of a parameter")
    parse_evol.set_defaults(fun = Plots.evol )
    parse_evol.add_argument("-p","--parameter",help="paramter to show. Default fbin.",default = "fbin",
            choices=["fbin","lagr"])
    
    #plot
    parse_evol = subparsers.add_parser("plot",help="plot position[velocity] of stars")
    parse_evol.set_defaults(fun = Plots.plot )
    parse_evol.add_argument("-s","--space",help="space to plot. Default position.",default = "position",
            choices=["position","velocity"])

    #compute
    parse_compute = subparsers.add_parser("compute",help="Calculate a parameter over time and write result in output.") 
    parse_compute.set_defaults(fun = Analyse.compute)
    available_functions = [ o[0] for o in getmembers(Analyse) if (isfunction(o[1]) and o[1].__module__ == "nbody6tools.Analyse") ]
    available_functions.remove("compute")
    parse_compute.add_argument("function",
            help="function to evaluate (Defined in Analyse module)",default = None,
            choices=available_functions)
    parse_compute.add_argument("-a","--arguments",dest="args",metavar="arg=value",type=str,nargs="+",
            help = "extra arguments to be passed to function. value can only be numbers for now.")
    parse_compute.add_argument("--doc",action="store_true",
            help="show documentation of function")
    parse_compute.add_argument("--overwrite",action="store_true",
            help="if specified, overwrite output. Else raise error if file exists.")

    return parser
   
def execute_actions(args) :
    args.fun(**vars(args))

if __name__ == '__main__':
    parser = executable_options()
    args = parser.parse_args()

    execute_actions(args)
