#!/usr/bin/python3
from __future__ import print_function
from nbody6tools import Reader
from nbody6tools.Reader import read_snapshot,get_times
from nbody6tools.Datamodel import parse_inputfile
import matplotlib
matplotlib.use("agg")
from matplotlib import animation,pyplot,cm
from scipy.io import FortranFile
from scipy.signal import savgol_filter
import numpy
import os


def compute_trajectory(DataFolder="./",**kw):
    times = get_times(DataFolder)
    outfile = open("%s/camera.dat"%DataFolder,"w")
    for i in range(len(times)) :
        sn = read_snapshot(DataFolder,i) 
        x,y,z = sn.parameters["rdens"]*sn.parameters["rbar"]
        size = sn.parameters["rscale"]*sn.parameters["rbar"]
        print("%i  %.5g    %.5g    %.5g   %.5g "%(i,x,y,z,size),end="\r" ) 
        outfile.write("%i  %.5g    %.5g    %.5g   %.5g \n"%(i,x,y,z,size) ) 
    outfile.close()

    #smooth the trajectory
    window, polyorder = 51,2
    I,x,y,z,size = numpy.loadtxt("%s/camera.dat"%DataFolder).T
    xs = savgol_filter(x,window,polyorder)
    ys = savgol_filter(y,window,polyorder)
    zs = savgol_filter(z,window,polyorder)
    sizes = savgol_filter(size,window,polyorder)

    outfile = open("%s/camera.dat"%DataFolder,"w" )
    for i,x,y,z,size in zip(I,xs,ys,zs,sizes) : 
        outfile.write("%i  %.5g    %.5g    %.5g   %.5g \n"%(i,x,y,z,size) ) 
    outfile.close()

def interpolate_state(t,t1,t2,State1,State2 ) :
    """ interpolate array between state 1 and 2.
    t = the moment to interpolate
    t1,t2 the times that represent state1 and state2
    State1,State2 the previous and future state. Should be any kind of array
    """
    if t < t1 or t > t2 :
        raise ValueError("Time out of range: %f - %f - %f"%(t1,t,t2) )

    if t1==t2:
        return State2

    f = float(t - t1) / float(t2-t1 )
    return State1*(1.-f) + State2*f

def fancy_movie(DataFolder,inputfile = Reader.inputFile ,output = None,fps=10,movie_length=50,
        tmax=None,cmap="magma",
        scolor=None,zlog = False, zlim=None,
        colorbar=False,dpi=None,
        boxsize = None,
        xy = "xz",
        **kw):
    if output is None:
        output = "./movie.mp4"
    if scolor is None:
        _cmap = cm.get_cmap(cmap)
        scolor = _cmap(1000000)
    bcolor = "c"
    
    #if max_movie_time is None:
    max_movie_time = movie_length

    opt = Reader.parse_inputfile(DataFolder+"/"+inputfile)
    gl = Reader.get_globals(DataFolder)

    sn0 = read_snapshot(DataFolder,inputfilename=inputfile)
    times = Reader.get_times(DataFolder)
    rhalf = gl["RSCALE[PC]"][::opt["NFIX"]]
    if tmax is None:
        tmax = times[-1]
    times = times[times<= tmax ]
    ntot = len(times)
    ### setup the plot with empty data
    fig = pyplot.figure()
    drawgas = opt["KZ"][50] > 0 
    if drawgas :
        if zlim is None:
            vmin,vmax = plotgas(DataFolder,0,get_limits=True,zlog=zlog)
            print("zlimits:",vmin,vmax)
            vmax*=1.3
        else:
            vmin,vmax = zlim
        _cmap = cm.get_cmap(cmap)
        pyplot.rcParams["axes.facecolor"] = _cmap(0)
        imbg,gridsize = plotgas(DataFolder,0,vmin=vmin,vmax=vmax,cmap=cmap,zlog=zlog,colorbar=colorbar)
        if boxsize is None:
            boxsize = gridsize
    else:
        pyplot.rcParams["axes.facecolor"] = "black"
        imbg = None

    sc_stars = pyplot.scatter([],[],[],color=scolor,alpha=.8)
    title = pyplot.title("Time : %.2f"%0.0)
    pyplot.xlabel("x (pc)")
    pyplot.ylabel("y (pc)")
    if boxsize is None:
        boxsize = rhalf[0]*4

    #TODO make this line optional

    pyplot.xlim( (-boxsize/2,boxsize/2) )
    pyplot.ylim( (-boxsize/2,boxsize/2) )
    pyplot.gca().set_aspect("equal")
    ###

    frames = numpy.linspace(0,ntot,fps*movie_length)

    global i_prev,i_next,ipold
    global SN0,SN1,State0,State1,time0,time1
    global StNew,StOld,StOldNew
    global facecolors

    i_prev = -1
    StNew = []
    #Ic,xc,yc,zc,sizec = numpy.loadtxt("nbt-movie_trayectory_smooth.dat").T
    camera = os.path.isfile("%s/camera.dat")

    #with writer.saving(fig,output,400): 
        #for frame in frames[0: fps*max_movie_time ] :
    def adjust_camera(i,ax = pyplot.gca(),mode="data") :
        Ic,xc,yc,zc,sizec = numpy.loadtxt("%s/camera.dat"%DataFolder).T
        X = dict()
        iprev = int(numpy.floor(i) )
        inext = int(numpy.ceil(i) )
        X["x"] = interpolate_state(i,iprev,inext,xc[iprev],xc[inext])
        X["y"] = interpolate_state(i,iprev,inext,yc[iprev],yc[inext])
        X["z"] = interpolate_state(i,iprev,inext,zc[iprev],zc[inext])
        S = interpolate_state(i,iprev,inext,sizec[iprev],sizec[inext])
         

        xlim = ( - boxsize/2 + X[xy[0]] , boxsize/2 + X[xy[0]]   )
        ylim = ( - boxsize/2 + X[xy[1]] , boxsize/2 + X[xy[1]]   )
        if mode == "camera":
            ax.set_ylim(ylim)
            ax.set_xlim(xlim)
            return 0,0,S
        else:
            return X[xy[0]] ,X[xy[1]],S


    def update_line(i,sc_stars,imbg,frames):
            global i_prev,i_next,ipold
            global SN0,SN1,State0,State1,time0,time1
            global StNew,StOld,StOldNew
            global facecolors
            frame = frames[i]
            movie_time = float(i)/float(fps)
            print("frame:%i Movie time: %.2f (End time: %.2f)"%(i,movie_time,max_movie_time),end="\r")
            ipold = i_prev
            i_prev = int(numpy.floor(frame))
            i_next = int(numpy.ceil(frame) )
            if i_prev != ipold: 
                StOldNew = StNew
                SN0 = read_snapshot(DataFolder,i_prev)
                SN0.to_physical()
                time0  = SN0.time
                State0 = SN0.stars
                olds = State0.name
                nord = numpy.argsort(olds)
                State0 = State0[nord]
                #i0Bound = State0.bound_indexes()
                facecolors = numpy.array([scolor]*len(State0))
                #facecolors[i0Bound] = bcolor

                SN1 = read_snapshot(DataFolder,i_next)
                SN1.to_physical()
                time1 = SN1.time
                State1 = SN1.stars
                nord = numpy.argsort(State1.name)
                State1 = State1[nord]
                State1 = State1[:len(State0)]

                StNew  = State1[ len(State0):]  #not yet used
                #print("inew Nnew, iold,Nold",i_next, len(State1) , i_prev,len(State0) )

            if camera:
                xc,yc,sizec = adjust_camera(frame,ax=pyplot.gca(),mode="data")
            else:
                xc,yc = 0,0
            sim_time = interpolate_state(frame,i_prev,i_next,time0,time1)

            if drawgas:
                plotgas(DataFolder,sim_time,update=True,imobj=imbg,zlog=zlog)

            x = interpolate_state(frame,i_prev,i_next,State0[xy[0]],State1[xy[0]])  - xc
            y = interpolate_state(frame,i_prev,i_next,State0[xy[1]],State1[xy[1]])  - yc


            #if len(StOldNew) > 0
            #    x = numpy.concatenate([x,StOldNew

            sc_stars.set_offsets(numpy.c_[x,y])
            sc_stars.set_sizes( State1.mass ) 
            sc_stars.set_facecolors( facecolors )
            sc_stars.set_edgecolors( facecolors )

            title.set_text("Time : %.2f Myr"%(sim_time))
            if drawgas :
                return sc_stars,imbg
            else:
                return sc_stars,

    movie = animation.FuncAnimation(fig, update_line, len(frames), fargs=(sc_stars,imbg,frames),blit=True)
    #movie.save(output,fps=fps,dpi=dpi,writer="imagemagick") 
    movie.save(output,fps=fps,dpi=dpi,writer="ffmpeg") 
    print("\nDone")

def powerlaw_gas(opt,parameters,time,ax=pyplot.gca(),update=False,imobj=None,cmap="magma",zlog=False,colorbar=False,get_limits=False,**kw):
    rcloud = opt["AP"]*1.2
    mcloud = (opt["MP"] - opt["MPDOT"]*time/parameters["tscale"] ) /opt["MP"] 
    rho0 = 3.0 * mcloud/4/numpy.pi/rcloud**3
    lims = (-rcloud*10,rcloud*10)

    x = numpy.linspace(lims[0],lims[1],256) 
    y = numpy.linspace(lims[0],lims[1],256) 
    X,Y = numpy.meshgrid(x,y)
    R = numpy.sqrt(X**2 + Y**2) / rcloud
    rho = rho0*R**(-opt["KRHO"] )
    if zlog :
        rho = numpy.log10(rho)
        rho[R>1.2] = numpy.log10(rho0) - 10
    else:
        rho[R>1.2 ] = rho0/1E10
        pass
    if get_limits:
        if zlog:
            rho0 = numpy.log10(rho0)
        return rho0, rho.max()
    if update:
        imobj.set_data(rho)
        imobj.set_extent([lims[0],lims[1]]*2 )
        return 
    result = pyplot.imshow(rho,extent=[lims[0],lims[1]]*2,cmap=cmap,zorder=-5,**kw)
    if colorbar:
        pyplot.colorbar()
    return result,rcloud*2

def plotgas(DataFolder,time,ax=pyplot.gca(),update = False,imobj=None,get_limits=False,background_model=True,
        cmap="gist_gray",zlog=False,colorbar=False,**kw):

    opt = parse_inputfile(DataFolder+"/input")
    parameters = read_snapshot(DataFolder,0).parameters
    if opt["KZ"][14] == 5 and opt["KZ"][50]==1:
        return powerlaw_gas(opt,parameters,time,ax=ax,update=update,imobj=imobj,cmap=cmap,zlog=zlog,colorbar=colorbar,get_limits=get_limits,**kw)

    tfolder = opt["TFOLDER"]
    zbar = opt["ZMBAR"]*opt["N"]
    gridsize = opt["GRIDSIZE"]*opt["RBAR"]
    dtt = opt["DTT"]
    itstart = opt["ITSTART"]
    nt = opt["NT"]
    threshold = opt["THRESHOLD"]
    krho = opt["KRHO"]
    rcloud = opt["AP"]*opt["RBAR"]

    if time == "last":
        time = (opt["NT"]-itstart) * dtt 

    #mcloud = (opt["MP"] - opt["MPDOT"]*time/parameters["tscale"] ) /opt["MP"]
    #print("\nMcloud:",mcloud)

    i1 = numpy.floor(itstart+time/dtt)
    i2 = numpy.ceil(itstart+time/dtt)
    t1 = (i1-itstart)*dtt
    t2 = (i2-itstart)*dtt

    mcloud1 = (opt["MP"] - opt["MPDOT"]*t1/parameters["tscale"] ) /opt["MP"]
    mcloud2 = (opt["MP"] - opt["MPDOT"]*t2/parameters["tscale"] ) /opt["MP"]

    States = []
    #get both states
    for i,mcl in zip([i1,i2],[mcloud1,mcloud2] ):
        f = FortranFile(tfolder+"/%04i"%i,"r")
        dims = f.read_ints(dtype=numpy.int32) #are wrong for some reason
        dims = numpy.array([128,128,128])
        #rho = f.read_reals(dtype=numpy.float32).reshape(dims,order="F")
        rho = f.read_reals().reshape(dims,order="F")
        #rho [rho<threshold ] = 0
        rho *= mcl
        #rho /= rho.sum()
        f.close()
        States.append(rho)
    
    rho = interpolate_state(time,(i1-itstart)*dtt,(i2-itstart)*dtt,States[0],States[1] )
        #vx = f.read_reals(dtype=numpy.float32).reshape(dims,order="F")
        #vy = f.read_reals(dtype=numpy.float32).reshape(dims,order="F")
        #vz = f.read_reals(dtype=numpy.float32).reshape(dims,order="F")

    cdens = rho.sum(axis=1).T #TODO: Able to choose projection
    if zlog:
        cdens = numpy.log10(cdens)
    if get_limits :
        print(zlog, cdens.min(),cdens.max(),end="\n")
        return cdens.min(),cdens.max()

    #print("plotting bgimage snapshot",i,cdens.min(),cdens.max())

    if update:
        imobj.set_data(cdens)
        return 
    result = pyplot.imshow(cdens,extent=[-gridsize/2,gridsize/2]*2,cmap=cmap,zorder=-5,
            origin="lower",**kw)
    if colorbar:
        pyplot.colorbar()
    if False  :
        pyplot.savefig("test.png")

    return result,gridsize

if __name__ == "__main__":
    import sys
    from argparse import ArgumentParser

    parser = ArgumentParser("Creates a movie of an Nbody simulation in a fancy way. Interpolates between frames to get smooth movements and a desired frame rate and movie length")
    parser.add_argument("DataFolder",metavar="FOLDER", default="./",nargs="?",
            help ="Folder where data is located. If not specified looks in current folder." )
    parser.add_argument("--inputfile",help="Name of Nbody6 inputfile, default: input",default="input")
    parser.add_argument("--output","-o",help = "output filename. Default: movie.mp4",default="movie.mp4")
    parser.add_argument("--fps",help="Desired frames per second. Default: 30", default = 30,type=float)
    parser.add_argument("--tmax","-t",help="Maximun simulation time to animate (Myr). Default: End of Simulation",default=None,type=float)
    parser.add_argument("--boxsize",help="Boxsize around cluster (parsecs). Default: 4 times initial half mass radius",default=None,type=float)
    parser.add_argument("--movie_length",help="Movie length in seconds. Default=30",default=30,type=float)
    parser.add_argument("--cmap",help="Background image colormap (see matplotlib documentation), default=viridis",default="viridis")
    parser.add_argument("--scolor",help="Color for the stars (see matplotlib documentation). Default is taken from the maximum value in the colormap.",default=None)
    parser.add_argument("--zlog",help="Use logaritmic axis for background gas",action="store_true")
    parser.add_argument("--colorbar",help="Show colorbar",action="store_true")
    parser.add_argument("--zlim",help="limits in the colorbar",nargs=2,type=float,default=None)
    parser.add_argument("--dpi",help="adjust dpi of video",type=float,default=None)
    parser.add_argument("--compute_trajectory",help="if True, a file nbt-movie_trayectory.dat will be created with the position of the center and the size. This file can be used to follow the cluster during the movie.",action="store_true")


    args = parser.parse_args()

    if args.compute_trajectory:
        compute_trajectory(**vars(args))
        exit()

    fancy_movie(**vars(args))
